title API Onboarding 

actor "User" as user
participant InvestSuite API
participant "Client Onboarding Solution" as onb_sol
participant "Identity Provider" as idp
participant "Client Middleware" as mw
participant Core Banking System
participant BDP CRM
participant Blanco

== Sign Up==

user->user:User downloads app

user->onb_sol:RED001 User clicks 'Sign Up'\nIs redirected to the Onboarding Solution (unauthenticated)\n\n(Webview or Redirect)

onb_sol->onb_sol:Strong identifity verification (eg. through a national ID provider)\nCapture additional information (AML, tax, ...)\nSetting a withdrawal IBAN\nMiFID Checks

opt If one contract is used for all products
onb_sol->onb_sol:Contracting flow:\n- Create the PDF contract file (for all products)\n- Create a signing package at Document Signing Solution\n- Redirect Document Signing Solution to sign the package\n- User signs the package with strong authentication\n- Retrieve the signed PDF (package)\n- Allow user to download the PDF (optional)\n- Store the PDF in the digital archive
end

opt If Client Managed Identity Provider
onb_sol->idp:Create User
end
onb_sol->InvestSuite API:RST001 Create User\n\nPOST /users/
opt If InvestSuite Managed Identity Provider
InvestSuite API->idp:Create User
end
onb_sol<--InvestSuite API:return (ivs_user_id)
onb_sol->InvestSuite API
InvestSuite API->InvestSuite API
onb_sol<--InvestSuite API
onb_sol->mw:Store the ivs_user_id in the middleware for future use
user<-onb_sol:User continues in app

user->idp:OID001 User clicks 'Login'\n\n(OpenID Compliant Scheme)
idp->idp:User activation within IdP
user<--idp:return with JWT\n\n(OpenID Scheme to accessToken, refreshToken...)
user->user:Complete app enrollment\n(Optional disclaimers, PIN, Face ID, Notifications...)

==Create Robo Advisor Portfolio==
user->user:User clicks 'Robo Advisor'
opt Robo Advisor contract is not signed
user->user
user->onb_sol:RED002 User to the Onboarding Solution (authenticated, including JWT and Portfolio ID)
onb_sol->onb_sol:Contracting flow (see above)
onb_sol->InvestSuite API:RST002 Update User\n\nPATCH /users/

end

alt Robo agreement signed
user->InvestSuite API:Create new portfolio\n\nstatus = WAITING FOR POLICY\nmoney type = paper_money
user<--InvestSuite API:portfolio id
user->InvestSuite API:Start suitability profiling
user<--InvestSuite API:return profile result
note over InvestSuite API,BDP CRM:Refer to suitability profiler diagram
InvestSuite API->BDP CRM:event to BDP when an assessment is complete(IVE011)\nevent to BDP that profile is complete (IVE012)
user->user
par fetch suitability result
note over InvestSuite API:ATTENTION : link to paper_money portfolio (virtual).\nThis is later replaced by the real_money portfolio after the conversion.\n\n-> don't make a link in the BDP systems with virtual Ptf's\n because they will be replaced (closed) by real_money Ptf's.\n-> but user level data from the Questionnaire can still be\n synced for prospects / existing clients\n
InvestSuite API<-mw:Get result of assessment in profile (IVR013)\nGet suitability profile result (IVR014)
InvestSuite API-->mw:return full suitability questionnaire
mw->BDP CRM:update user (suitability profile)
mw<--BDP CRM:ack
end
user->InvestSuite API:PATCH policy & risk profile
user<--InvestSuite API:return ok
note over InvestSuite API:Portfolio status is updated\nmoney type = "paper_money"\nstatus = "WAITING FOR FUNDS"

user->InvestSuite API:Get proposal\n-> IVS optimiser will take over the connection to the external
alt Lifecycle
InvestSuite API->mw:FDA001\nGet proposal information (Monte Carlo + Glidepath)\n(@wouter to be adjusted --> will be done through own IVS optimiser (future endpoints)
mw->Blanco:get proposal
mw<--Blanco:return proposal
InvestSuite API<--mw:return proposal
else Standard Discretionary
InvestSuite API->InvestSuite API:Get monte carlo for policy\nTo be configured at IVS\n\n.../future/value
end
user<--InvestSuite API:return proposal screen
user->user
user->user:User chooses to "invest now"
user->InvestSuite API:Activate portfolio\n\n- delete "paper_money" portfolio\n- create "real_money" portfolio
InvestSuite API->InvestSuite API:Delete portfolio (PAPER_MONEY)\nwas created earlier
InvestSuite API->InvestSuite API:Create portfolio (REAL_MONEY)\nAll links/data are moved to the newly created portfolio
note over InvestSuite API:New portfolio\nmoney type = "real_money"\nstatus = "WAITING FOR ACCOUNT"
mw<-InvestSuite API:event portfolios/creation (IVE021)\nevent portfolios/status-update (IVE022) \n\n1{\n2  "id": "P01F8ZSNV0J45R9DFZ3D7D8C26F", \n3  "value": "WAITING_FOR_ACCOUNT"\n4}\nNote: possible values for value field are WAITING_FOR_POLICY,\nWAITING_FOR_ACCOUNT/ACTIVATING, WAITING_FOR_FUNDS, ACTIVE
InvestSuite API<-mw:Get portfolio details (IVR004)\n\n- to read if it is a robo / self portfolio\n- to read the money_type (no account creation in avq needed\nfor paper_money)\n\n!!! get results of assessment when a real_money ptf is created
InvestSuite API-->mw:return portfolio information
alt Lifecycle
mw->Core Banking System:Create container
mw<--Core Banking System:return
mw->Blanco:Create portfolio in Blanco
mw<--Blanco:ack
else Standard discretionary
mw->Core Banking System:Create container
mw<--Core Banking System:return

end
InvestSuite API<-mw:IVR003 - PATCH /portfolios/(id) (Container + money account)\n\nexternal_id, brokerage_account >brokerage_portfolio_id, \nbrokerage_account >brokerage_user_id, brokerage_account > \nbank_account_type, brokerage_account > bank_account_number, \nbrokerage_account > payment_reference
note over InvestSuite API:Status is updated\nmoney type = "real_money"\nstatus = "WAITING FOR FUNDS"
user<-InvestSuite API:return status-update: WAITING FOR FUNDS
user->user:User can see funding instruction
end
==USER IS LOGGED IN - SELF PORTFOLIO CREATION==
user->user:User taps self card
user->user:App checks if user is allowed to open a SELF portfolio\nin this case it is allowed
alt SELF agreement signed
user->InvestSuite API:Create new portfolio\n\nstatus = WAITING FOR ACCOUNT\nmoney type = real_money
InvestSuite API->InvestSuite API:create portfolio in ivs DB
user<--InvestSuite API:portfolio id
user->user
user->InvestSuite API
user<--InvestSuite API
user->user
user->user
user->InvestSuite API
mw<-InvestSuite API:event portfolios/creation (IVE021)\nevent portfolios/status-update (IVE022) \n\n1{\n2  "id": "P01F8ZSNV0J45R9DFZ3D7D8C26F", \n3  "value": "WAITING_FOR_ACCOUNT"\n4}\nNote: possible values for value field are WAITING_FOR_POLICY,\nWAITING_FOR_ACCOUNT/ACTIVATING, WAITING_FOR_FUNDS, ACTIVE
InvestSuite API<-mw:Get portfolio details (IVR004)\n\n- to read if it is a robo / self portfolio\n- to read the money_type (no account creation in avq needed\nfor paper_money)
InvestSuite API-->mw:return portfolio information
mw->Core Banking System:Create container
mw<--Core Banking System:return
InvestSuite API<-mw:IVR003 - PATCH /portfolios/(id) (Container + money account)\n\nexternal_id, brokerage_account >brokerage_portfolio_id, \nbrokerage_account >brokerage_user_id, brokerage_account > \nbank_account_type, brokerage_account > bank_account_number, \nbrokerage_account > payment_reference
note over InvestSuite API:Status is updated\nmoney type = "real_money"\nstatus = "WAITING FOR FUNDS"
user<-InvestSuite API:return status-update: WAITING FOR FUNDS
user->user:User can see funding instruction
else Self agreement NOT signed
user->user:App checks if a user is allowed to create a SELF portfolio\nIn this case it is not allowed
user->onb_sol:App opens onboarding solution of BDP (incl. JWT and product needed to start up the journey) (ONB002)
onb_sol->onb_sol:Contracting (see above)
onb_sol->InvestSuite API:Update user that Self contract has been signed (IVR002)\n\nPATCH /users/(id)
note over onb_sol:Next time user will follow the alternative scenario (above)
end

